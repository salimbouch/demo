name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Web App Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/k8s-selenium:web-app-${{ github.sha }}

      - name: Build and push Test Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile.test
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/k8s-selenium:test-${{ github.sha }}

      - name: Update K8s manifests
        run: |
          sed -i 's|image: .*|image: ${{ secrets.DOCKERHUB_USERNAME }}/k8s-selenium:web-app-${{ github.sha }}|' k8s/deployments/web-app-deployment.yaml
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add k8s/deployments/web-app-deployment.yaml
          git commit -m "Update web-app image to ${{ github.sha }}"
          git push

      - name: Setup SSH for VM access
        env:
          JUMP_HOST_SSH_PRIVATE_KEY: ${{ secrets.JUMP_HOST_SSH_PRIVATE_KEY }}
          VM_SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$JUMP_HOST_SSH_PRIVATE_KEY" > ~/.ssh/jump_host_key
          echo "$VM_SSH_PRIVATE_KEY" > ~/.ssh/vm_key
          chmod 600 ~/.ssh/jump_host_key ~/.ssh/vm_key
          cat >>~/.ssh/config <<EOF
          Host jumphost
            HostName ${{ secrets.JUMP_HOST }}
            User ${{ secrets.JUMP_USER }}
            IdentityFile ~/.ssh/jump_host_key
            StrictHostKeyChecking no
          Host targetvm
            HostName ${{ secrets.VM_HOST }}
            User ${{ secrets.VM_USER }}
            ProxyJump jumphost
            IdentityFile ~/.ssh/vm_key
            StrictHostKeyChecking no
          EOF

      - name: Sync and deploy with ArgoCD
        env:
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          echo "Checking ArgoCD installation..."
          if ! ssh targetvm "which argocd"; then
            echo "ArgoCD CLI not found. Please install ArgoCD CLI on the target VM."
            exit 1
          fi

          echo "Checking ArgoCD server status..."
          if ! ssh targetvm "kubectl get pods -n argocd | grep argocd-server"; then
            echo "ArgoCD server pod not found. Please ensure ArgoCD is installed in the cluster."
            exit 1
          fi

          echo "Attempting to login to ArgoCD..."
          ssh targetvm "argocd login localhost:8080 --auth-token $ARGOCD_TOKEN --insecure --grpc-web" || {
            echo "ArgoCD login failed. Checking ArgoCD server logs..."
            ssh targetvm "kubectl logs -n argocd -l app.kubernetes.io/name=argocd-server --tail=50"
            exit 1
          }

          echo "Syncing ArgoCD application..."
          if ! ssh targetvm "argocd app sync ba-demo-app --timeout 300"; then
            echo "ArgoCD sync failed. Checking application status..."
            ssh targetvm "argocd app get ba-demo-app"
            exit 1
          fi

          echo "Waiting for ArgoCD application to become healthy..."
          if ! ssh targetvm "argocd app wait ba-demo-app --health --timeout 300"; then
            echo "Application did not become healthy. Checking resources..."
            ssh targetvm "kubectl get all -n default"
            exit 1
          fi

          echo "Verifying deployment update..."
          DEPLOYED_IMAGE=$(ssh targetvm "kubectl get deployment web-app -o=jsonpath='{.spec.template.spec.containers[0].image}'")
          if [[ "$DEPLOYED_IMAGE" != "${{ secrets.DOCKERHUB_USERNAME }}/k8s-selenium:web-app-${{ github.sha }}" ]]; then
            echo "Deployment not updated to the latest image. Current image: $DEPLOYED_IMAGE"
            exit 1
          fi

          echo "ArgoCD sync and deployment verification completed successfully."

      - name: Run Selenium tests
        run: |
          echo "Generating Selenium test job YAML..."
          JOB_NAME="selenium-test-job-$(date +%s)"
          SELENIUM_JOB_YAML=$(cat k8s/jobs/selenium-test-job-template.yaml | 
            sed 's|\${DOCKERHUB_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g' | 
            sed 's|\${IMAGE_TAG}|${{ github.sha }}|g' |
            sed "s|name: selenium-test-job|name: $JOB_NAME|g")
          
          echo "Applying new Selenium test job..."
          echo "$SELENIUM_JOB_YAML" | ssh targetvm "kubectl apply -f -"
          
          echo "Waiting for Selenium test job to complete..."
          ssh targetvm "kubectl wait --for=condition=complete job/$JOB_NAME --timeout=600s"
          
          echo "Retrieving test results..."
          ssh targetvm "kubectl logs job/$JOB_NAME" > test_results.log
          
          if grep -q "BUILD FAILURE" test_results.log; then
            echo "Tests failed. Check the logs for more details."
            exit 1
          else
            echo "Tests passed successfully!"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results.log
        if: always()

      - name: Cleanup
        if: always()
        run: |
          ssh targetvm "kubectl delete job $JOB_NAME"